boolean_vector <- c("TRUE", "FALSE", "TRUE")
boolean_vector
boolean_vector <- c(TRUE, "FALSE", "TRUE")
boolean_vector
a<-seq(1,5,2)
a
character_vector <- c("a", "b", "c")#
numeric_vector <- c(1, 10, 49)
sum(character_vector, numeric_vector)
rep(1:4, 2)
length(rep(1:4, 2))
length(rep(1:4, each = 2) )
length(seq(1, 15, by = 2))
m<-matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE,#
       dimnames = NULL)
m
m<-matrix(data = NA, nrow = 2, ncol = 1, byrow = FALSE,#
       dimnames = NULL)
m
m<-matrix(data = 1, nrow = 2, ncol = 2, byrow = FALSE,#
       dimnames = NULL)
m
vec5<-sqrt(vec4)
vec1 <-  rep(1:4, 2)#
vec2 <- rep(1:4, each = 2) #
vec3<-seq(1, 15, by = 2)
vec4<-sum(vec1,vec2,vec3)
vec5<-sqrt(vec4)
vec5
vec4
vec4<-vec1+vec2+vec3
vec5
vec5<-sqrt(vec4)
vec5
rbind(vec1,vec2)
cbond(vec2,vec3)
cbind(vec2,vec3)
colnames(m)<-c("monday", "Tuesday")
m
rownames(m)<-c("monday", "Tuesday")
m
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE,#
               dimnames = list(c("row1", "row2"),#
                               c("C.1", "C.2", "C.3")))
mdat
m<-matrix(data = NA, nrow = 2, ncol = 1, byrow=TRUE,#
  dimnames=list(rnames, cnames))
m
rnames <- c("R1", "R2")#
cnames <- c("C1", "C2")
m
m<-matrix(data = NA, nrow = 2, ncol = 1, byrow=TRUE,#
  dimnames=list(rnames, cnames))
m<-matrix(data = NA, nrow = 2, ncol = 2, byrow=TRUE,#
  dimnames=list(rnames, cnames))
m
w <- list(name="Fred", mynumbers=a, mymatrix=y, age=5.3)
y<-matrix(1:20, nrow=5,ncol=4)
w <- list(name="Fred", mynumbers=a, mymatrix=y, age=5.3)
w
w <- list(name="Odum", mynumbers=vec1, mymatrix=m, age=5.3)
w
ls(w)
class(w)
class(w[1])
class(w[2])
?typeof(w)
typeof(w)
attributes(w)
ls(w)
typeof(w)
b<-list(vec1,vec2)
b
warpbreaks[1:10,]#
as.matrix(warpbreaks[1:10,])
prime_seqs <- list(#
    2, 3, 4:5,#
    6:7, 8:11, 12:13,#
    14:17, 18:19, 20:23#
  )
prime_seq
prime_seqs
(prime_matrix <- matrix(prime_seqs, nrow = 3))
dat<-c('low','med', 'high')
is.factor(dat)
print(is.factor(data))
factor_dat <- factor(dat)
factor_dat
new_order_dat <- factor(factor_dat,levels = c("med","hig","low"))
new_order_dat
new_order_dat <- factor(factor_dat,levels = c("med","high","low"))
new_order_dat
gender <- c(rep("male",20), rep("female", 30)) #
gender <- factor(gender)
summary(gender)
hues <- c(rep("blue",20), rep("red", 30)) #
hues <- factor(hues) #
summary(hues)
vec6<-rbind(vec1,vec2)
vec6[1,]
vec6
vec6[,1]
d <- c(1,2,3,4)#
e <- c("red", "white", "red", NA)#
f <- c(TRUE,TRUE,TRUE,FALSE)#
mydata <- data.frame(d,e,f)#
names(mydata) <- c("ID","Color","Passed") # variable names
mydata
n = c(2, 3, 5) #
 s = c("aa", "bb", "cc") #
 b = c(TRUE, FALSE, TRUE) #
 df = data.frame(n, s, b)
df
df[1]
df["n"]
df[,"n"]
install.packages("tidyverse")#
#
# Alternatively, install just tibble:#
install.packages("tibble")
library(tibble)#
as_tibble(iris)
a<-tibble(x = 1:5, y = 1, z = x ^ 2 + y)
a
df[,1]
df[1,]
df
df$n
library(ggplot2)#
library(gganimate)#
library(ggforce)#
library(tweenr)#
#
# Making up data#
t <- data.frame(x=0, y=0, colour = 'forestgreen', size=1, alpha = 1, #
                stringsAsFactors = FALSE)#
t <- t[rep(1, 12),]#
t$alpha[2:12] <- 0#
t2 <- t#
t2$y <- 1#
t2$colour <- 'firebrick'#
t3 <- t2#
t3$x <- 1#
t3$colour <- 'steelblue'#
t4 <- t3#
t4$y <- 0#
t4$colour <- 'goldenrod'#
t5 <- t4#
c <- ggforce::radial_trans(c(1,1), c(1, 12))$transform(rep(1, 12), 1:12)#
t5$x <- (c$x + 1) / 2#
t5$y <- (c$y + 1) / 2#
t5$alpha <- 1#
t5$size <- 0.5#
t6 <- t5#
t6 <- rbind(t5[12,], t5[1:11, ])#
t6$colour <- 'firebrick'#
t7 <- rbind(t6[12,], t6[1:11, ])#
t7$colour <- 'steelblue'#
t8 <- t7#
t8$x <- 0.5#
t8$y <- 0.5#
t8$size <- 2#
t9 <- t#
ts <- list(t, t2, t3, t4, t5, t6, t7, t8, t9)#
#
tweenlogo <- data.frame(x=0.5, y=0.5, label = 'tweenr', stringsAsFactors = F)#
tweenlogo <- tweenlogo[rep(1, 60),]#
tweenlogo$.frame <- 316:375#
#
# Using tweenr#
tf <- tween_states(ts, tweenlength = 2, statelength = 1, #
                   ease = c('cubic-in-out', 'elastic-out', 'bounce-out', #
                            'cubic-out', 'sine-in-out', 'sine-in-out', #
                            'circular-in', 'back-out'), #
                   nframes = 375)#
#
# Animate with gganimate#
p <- ggplot(data=tf, aes(x=x, y=y)) + #
    geom_text(aes(label = label, frame = .frame), data=tweenlogo, size = 13) + #
    geom_point(aes(frame = .frame, size=size, alpha = alpha, colour = colour)) + #
    scale_colour_identity() + #
    scale_alpha(range = c(0, 1), guide = 'none') +#
    scale_size(range = c(4, 60), guide = 'none') + #
    expand_limits(x=c(-0.36, 1.36), y=c(-0.36, 1.36)) + #
    theme_bw()#
animation::ani.options(interval = 1/15)#
gganimate(p, "dancing ball.gif", title_frame = F, ani.width = 400, #
           ani.height = 400)
random_numbers<-rnorm(3,mean=5,sd=3)
random_numbers
random_numbers<-rnorm(30,mean=5,sd=3)
mean(random_numners)
mean(random_numbers)
med(random_numbers)
median(random_numbers)
# Create a list of matrices#
MyList <- list(A,B,C)#
#
# Extract the 2nd column from `MyList` with the selection operator `[` with `lapply()`#
lapply(MyList,"[", , 2)#
#
# Extract the 1st row from `MyList`#
lapply(MyList,"[", 1, )
l <- list(a = 1:10, b = 11:20)#
#
# the mean of the values in each element#
lapply(l, mean)#
$a#
#
$b#
#
# the sum of the values in each element#
lapply(l, sum)#
$a#
$b
lapply(l, sum)#
$a
var(dat)
dat<-rnorm(30,mean=5,sd=3) # creating a vector
var(dat)
sqrt(var(dat)/length(dat))
standard.error <- function(x) {#
    sqrt(var(x)/length(x))#
}
standard.error(dat)
a<-c()#
 for(i in 1:10){#
a[i]<-i^3#
 }#
 a
for(i in 1:100){#
print("Hello world!")#
print(i*i)#
}
for(i in 1:10){#
print("Hello world!")#
print(i*i)#
}
x <- c(1:20)#
y <- c(3, 5, 12)#
x[y]#
x[-y]
x <- c(1:5,2,2,2,2,2)#
x[x > 4]#
x[x < 4]#
which(x < 4)#
which(x == 2)
vec7 <- c(1:5,2,2,2,2,2)#
vec7[vec7 > 4]#
vec7[vec7 < 4]#
which(vec7 < 4)#
which(vec7 == 2)
vec7
z#
z*2#
z+2#
z*z
z <- matrix(x, byrow=T, nrow=5)#
z
z#
z*2#
z+2#
z*z
z%*%z
z%/%y
RandTreePlotter <- function(x){#
   #this function creates a plot of a random evolutionary tree#
   #of size x#
   require(ape)#
   tree <- rcoal(x)#
   plot(tree)#
 }#
RandTreePlotter(20)
Tree <- function(x){#
   #this function creates a plot of a random evolutionary tree#
   #of size x#
   require(ape)#
   tree <- rcoal(x)#
   plot(tree)#
 }#
Tree(20)
y <- 1#
while(y < 10){#
 print(y)#
 y <- y+1#
}#
print("Thank goodness that's done")
x <- 8#
if (x < 9) print("x is less than nine")#
x <- 10#
if (x < 9) print("x is less than nine")
dat<-rnorm(30,mean=5,sd=3)
sort(dat)
Rounder <- function(x){#
   #this function uses the floor function to #
   #do what the round function does#
   x <- x+0.5#
   floor(x)#
 }
Rounder(2.2)
n0 = 1#
p = c(r = 0.5, K=100) ## c() is a function that simply concatenates the two entries, creating a vector with two entries#
p[1]
disc.logistic = function(n, p) { ## here are just saying that 'disc.logistic' is a function that takes two arguments#
  r = unname(p['r']) ## set the growth rate (dropping the parameter name with 'unname')#
  K = unname(p['K']) ## set the carrying capacity#
  n1 = n + r * n * (1 - n / K) ## calculate the new population size#
  return(n1) ## and return it #
}#
#
## So, to calculate the population size at time t=1, #
n1 = disc.logistic(n0, p) ## call the function with the population size at t=0 and the parameters#
n1
disc.logistic.2 = function(n, p, T) { ## T is the total number of time steps#
  ## Create a new variable that is a vector of length T, so that N[1] is the initial population size (t=0), N[2] is the population size at time t=1, N[3] = pop'n size at t=2, ..., N[T] = pop'n size at t=T-1 and N[T+1] = pop'n size at t=T#
  N = vector(length=T+1)#
  N[1] = n ## set the initial value#
  ## Create a loop that will increment time by one time unit, calculate the new population size, and save it in our vector#
  for (t in 1:T) { #
    N[t+1] = disc.logistic(N[t], p) ## we can call the function we wrote above to calculate the new population size#
  }#
  return(N) ## return the vector of population sizes#
}#
n = disc.logistic.2(n0, p, 10) ## calculate just the first 10 time steps#
n
plot(x=0:10, y=n, type='l', xlab='Time', ylab='Population size', main='Discrete time logistic model')
n
n <- as.data.frame(ode(y=n0, times=times, func=cont.logistic, parms=p))
n = as.data.frame(ode(y=n0, times=times, func=cont.logistic, parms=p))
n = ode(y=n0, times=times, func=cont.logistic, parms=p)
library(deSolve) ## load the functions into the current R environment#
#
## first, we need to define the function that calculates the derivative#
## 'ode' requires that the function have three arguments, in this order: #
## t: the time points that you want to record the output#
## n: the initial value of the variable(s)#
## p: the parameters#
cont.logistic = function(t, n, p) { #
  r = unname(p['r'])#
  K = unname(p['K'])#
  ## calculate the rate of change#
  dndt = r * n * (1 - n / K)#
  ## return the rate of change as a list object (required by ode)#
  list(c(dndt)) ## if you were calculating more than one derivative, you would have c(dn1dt,dn2dnt,etc.)#
}#
#
## what times do you want to record the output?#
times = seq(0, 10, by=1) ## creates a vector running from 0 to 10 in steps of 1#
#
## what are the parameter values?#
p = c(r=0.5, K=100)#
#
## what is the initial population size?#
n0 = 1#
#
## call the function 'ode' to do the numerical integration. ode requires four arguments (see ?ode to see other options)#
## y: the initial value vector#
## times: the vector of time points for recording the output (note that this doesn't affect the accuracy at all)#
## func: the function specifying the derivatives#
## parms: the parameters required by the function specified by 'func'#
n <- as.data.frame(ode(y=n0, times=times, func=cont.logistic, parms=p))#
out.SIR <- as.data.frame(lsoda(xstart.SIR,times.SIR,ClosedSIRModel,params.SIR))#
n
n
names(n)<-c("time, "N")
names(n)<-c("time", "N")
n
plot(x=n[,1], y=n[,2], type='l', xlab='Time', ylab='Population size', main='Continuous time logistic model')
with(out.SIR,plot(S~time,type="b",col="black",ylim=c(0,1),ylab="S (black), I (red), R (purple)"), pch=16)#
with(out.SIR,lines(I~time,type="o",col="red"), pch=16)#
with(out.SIR,lines(R~time,type="o",col="purple"), pch=16)
library(deSolve) ## load the functions into the current R environment#
#
## first, we need to define the function that calculates the derivative#
## 'ode' requires that the function have three arguments, in this order: #
## t: the time points that you want to record the output#
## n: the initial value of the variable(s)#
## p: the parameters#
cont.logistic = function(t, n, p) { #
  r = unname(p['r'])#
  K = unname(p['K'])#
  ## calculate the rate of change#
  dndt = r * n * (1 - n / K)#
  ## return the rate of change as a list object (required by ode)#
  list(c(dndt)) ## if you were calculating more than one derivative, you would have c(dn1dt,dn2dnt,etc.)#
}#
#
## what times do you want to record the output?#
times = seq(0, 10, by=1) ## creates a vector running from 0 to 10 in steps of 1#
#
## what are the parameter values?#
p = c(r=0.5, K=100)#
#
## what is the initial population size?#
n0 = 1#
#
## call the function 'ode' to do the numerical integration. ode requires four arguments (see ?ode to see other options)#
## y: the initial value vector#
## times: the vector of time points for recording the output (note that this doesn't affect the accuracy at all)#
## func: the function specifying the derivatives#
## parms: the parameters required by the function specified by 'func'#
n <- as.data.frame(lsoda(y=n0, times=times, func=cont.logistic, parms=p))
n
